{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"attack",
				"attack_args"
			],
			[
				"trai",
				"train_loader"
			],
			[
				"atta",
				"attack_args"
			],
			[
				"att",
				"attack_args"
			],
			[
				"ep",
				"epsilon"
			],
			[
				"de",
				"deepillusion"
			],
			[
				"iter",
				"iterative_soft_attack"
			],
			[
				"pertu",
				"perturbation_dict"
			],
			[
				"per",
				"percent_images_attacked"
			],
			[
				"di",
				"difference"
			],
			[
				"test",
				"test_loader"
			],
			[
				"ma",
				"max_pool2d"
			],
			[
				"No",
				"NotImplementedError"
			],
			[
				"dist",
				"dist_correct"
			],
			[
				"re",
				"requires_grad"
			],
			[
				"adv",
				"adversarial"
			],
			[
				"datA",
				"data_params"
			],
			[
				"num",
				"num_neurons"
			],
			[
				"dis",
				"distortions"
			],
			[
				"Fo",
				"FourthLayer"
			],
			[
				"bias",
				"bias_scalar"
			],
			[
				"che",
				"checkpoint_name"
			],
			[
				"path",
				"patchsize"
			],
			[
				"get",
				"get_arguments"
			],
			[
				"adversa",
				"adversarial_features"
			],
			[
				"plot",
				"plot_filters"
			],
			[
				"batch_s",
				"test_batch_size"
			],
			[
				"x_",
				"x_min"
			],
			[
				"data",
				"data_params"
			],
			[
				"rand",
				"rand_perturb"
			],
			[
				"random",
				"random_start"
			],
			[
				"step",
				"step_size"
			],
			[
				"pert",
				"perturbation"
			],
			[
				"mod",
				"modReLU1"
			],
			[
				"comp",
				"comp_conv1"
			],
			[
				"Ltf",
				"Ltf_interpolated"
			],
			[
				"ifft",
				"ifftshift"
			],
			[
				"plt",
				"plt"
			],
			[
				"keep",
				"keep_orig_test_cfo"
			],
			[
				"df",
				"df_aug_train"
			],
			[
				"aug_type",
				"aug_type_cfo"
			],
			[
				"x",
				"x_test"
			],
			[
				"dict",
				"dict_wifi_no_aug"
			],
			[
				"augm",
				"augment_cfo"
			],
			[
				"ex",
				"exp_i"
			],
			[
				"exp",
				"experiment_setup"
			],
			[
				"seed_",
				"seed_test_day"
			],
			[
				"seed_test",
				"seed_test_day"
			],
			[
				"angles_em",
				"angles_embed_avg"
			],
			[
				"whi",
				"which_layer"
			],
			[
				"layer",
				"layer_ord"
			],
			[
				"tem",
				"temporal_index"
			],
			[
				"ac",
				"activation_count"
			],
			[
				"au",
				"augment_with_channel"
			],
			[
				"sam",
				"sampling_rate"
			],
			[
				"seed_au",
				"seed_aug_cfo"
			],
			[
				"ver",
				"verbose_train"
			],
			[
				"wifi",
				"dict_wifi"
			],
			[
				"features",
				"features_test_classes"
			],
			[
				"x_tes",
				"x_test_classes"
			],
			[
				"eq",
				"equalize_train_before"
			],
			[
				"train",
				"training-eps"
			],
			[
				"def",
				"def_id"
			],
			[
				"ad",
				"add_argument"
			],
			[
				"arch",
				"architecture"
			],
			[
				"im",
				"img_input"
			],
			[
				"cl",
				"clip_max"
			],
			[
				"clip",
				"clip_min"
			],
			[
				"mul",
				"multiple_day_fingerprint"
			],
			[
				"augme",
				"augment_channel"
			],
			[
				"num_au",
				"num_aug_train"
			],
			[
				"clas",
				"class_indices"
			],
			[
				"decay",
				"decay_rate"
			],
			[
				"signal_faded_",
				"signal_faded_cfo"
			],
			[
				"signal",
				"signal_eq"
			],
			[
				"pre",
				"preamble_eq"
			],
			[
				"biddi",
				"bidding_dict"
			],
			[
				"who",
				"who_can_bid"
			],
			[
				"who_",
				"who_offered"
			],
			[
				"y_train",
				"y_train_aug"
			],
			[
				"x_t",
				"x_train_aug"
			],
			[
				"com",
				"complex_train"
			],
			[
				"y_",
				"y_test_orig"
			],
			[
				"y_t",
				"y_train_orig"
			],
			[
				"x_tra",
				"x_train_orig"
			],
			[
				"sign",
				"signal_ch"
			],
			[
				"nu",
				"num_aug_train"
			],
			[
				"chec",
				"check_signal_power_effect"
			],
			[
				"fi",
				"fig_name"
			],
			[
				"ph",
				"phy_method_cfo"
			],
			[
				"augmen",
				"augment_channel"
			],
			[
				"equ",
				"equalize_test"
			],
			[
				"add",
				"add_channel"
			],
			[
				"nois",
				"noise_method"
			],
			[
				"channel",
				"channel_method"
			],
			[
				"complex_tra",
				"complex_train_removed_cfo"
			],
			[
				"dic",
				"dict_wifi"
			],
			[
				"ar",
				"architecture"
			],
			[
				"dif",
				"different_day_scenario"
			],
			[
				"pivot_",
				"pivot_index-1"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"max",
				"maxSum"
			],
			[
				"Four",
				"FourLayerModelThresholded"
			],
			[
				"defe",
				"defense_epsilon"
			],
			[
				"usi",
				"using_threshold"
			],
			[
				"sp_frontend_",
				"sp_frontend_threshold"
			],
			[
				"Spars",
				"sparsifying"
			],
			[
				"with",
				"with_spfe"
			],
			[
				"wi",
				"with_defense"
			],
			[
				"Fou",
				"FourLayerModel"
			],
			[
				"total",
				"total_loss"
			],
			[
				"end",
				"end_points"
			],
			[
				"game",
				"game_score"
			],
			[
				"dro",
				"drop"
			],
			[
				"card",
				"card_orders"
			],
			[
				"legal",
				"legal_actions"
			],
			[
				"lst",
				"lstm_linear"
			],
			[
				"high",
				"highest_offer"
			],
			[
				"trum",
				"trump_count"
			],
			[
				"hi",
				"highest_offer"
			],
			[
				"ro",
				"number_rounds"
			],
			[
				"trump",
				"trump_condition"
			],
			[
				"turn",
				"turn_family"
			],
			[
				"play",
				"playable_cards"
			],
			[
				"pla",
				"playable_cards"
			],
			[
				"Trum",
				"trump_condition"
			],
			[
				"dr",
				"drawn_card"
			],
			[
				"window",
				"windows_imag"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"XeLaTeX"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Preferences: Package Control Settings â€“ User"
			],
			[
				"rai",
				"RainbowBrackets: tinct view"
			],
			[
				"",
				"AutoPEP8: Preview Changes"
			],
			[
				"pac",
				"Preferences: RainbowBrackets Settings"
			],
			[
				"reload",
				"LiveReload: Self test"
			],
			[
				"ma",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			],
			[
				"markdo",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"subl",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublime",
				"Preferences: SublimeLinter Settings"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 421.0,
		"history":
		[
			"done",
			"install package",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/metehan/Desktop/lab/deep_noise_rejection"
	],
	"file_history":
	[
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/models/lenet_nr.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/main.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/train_test_functions.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/models/lenet.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/models/tools.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/train_test_functions.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/MNIST/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/utils/namers.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/MNIST/models/lenet.py",
		"/Users/metehan/Desktop/lab/every-layer-noise-rejection/MNIST/models/lowapi.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/_basic_iterative_method.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/_version.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/setup.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/models/resnet_new.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/README.md",
		"/Users/metehan/Desktop/adv/cvx_demixing/CIFAR10/run_attack_new.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_pgd.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/__init__.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/__init__.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_pgd.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/main.py",
		"/Users/metehan/Desktop/RFML/complexnn/init.py",
		"/Users/metehan/Desktop/lab/deep_adv/train_test_functions.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/adv_ml/CIFAR10/parameters.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/parameters.py",
		"/Users/metehan/Desktop/lab/adv_ml/MNIST/main.py",
		"/Users/metehan/Desktop/lab/deep_adv/adversary/layer_attacks.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/models/lowapi.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_fgsm.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_basic_iterative_method.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_rfgsm.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_soft_attacks.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/_utils.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/_utils.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/fgsm_test.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/fgsmt_test.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/pgd_test.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/rfgsm_test.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/test_utils.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/main_demixed.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/train_decoder.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/run_attack.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/run_attack_new.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/main_demixed.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/MNIST/main.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/train_test_functions_old.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/train_test_functions.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/utils/utils.py",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/User/GitConflictResolver.sublime-settings",
		"/Users/metehan/Library/Application Support/Sublime Text 3/Packages/Git Conflict Resolver/GitConflictResolver.sublime-settings",
		"/Users/metehan/Desktop/lab/cvx_demixing/.git/rebase-apply/patch",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/main_combined.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/adversary/NR_attack.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/adversary/soft_attacks.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/analysis/attack_verification.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/analysis/reconstruction_comparison_stats.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/analysis/sparsity_comparison.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/reconstruction_methods/dantzig.py",
		"/Users/metehan/Desktop/lab/cvx_demixing/CIFAR10/reconstruction_methods/dantzig_constrained.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/main_master.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/analysis/plotter.py",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/main_new.py",
		"/Users/metehan/Desktop/lab/deep_adv/train_test_functions_old.py",
		"/Users/metehan/Desktop/lab/deep_adv/deep_adv.sublime-project",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/pgd_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/imagenet_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_utils.py",
		"/Users/metehan/Google Drive/github-repos/My_Website/content/en/project/mywireless-fingerprinting/index.md",
		"/Users/metehan/Google Drive/github-repos/My_Website/content/en/project/deep-illusion/index.md",
		"/Users/metehan/Desktop/lab/deep_adv/MNIST/read_datasets.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/bim_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/rfgsm_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_basic_iterative_method.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/fgsmt_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/fgsm_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/rfgsm_test.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_utils.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_fgsm.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/amp/_pgd.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/amp/_rfgsm.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/amp/_soft_attacks.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_soft_attacks.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_rfgsm.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/amp/_fgsm.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/examples/models/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/examples/cifar_example.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/examples/cifar10-adversarial-examples.ipynb",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/_rfgsm.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/_fgsm.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/_pgd.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/_soft_attacks.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/analysis/_perturbation_statistics.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/amp/__init__.py",
		"/Users/metehan/miniconda3/pkgs/numpy-1.17.2-py36h6b0580a_0/lib/python3.6/site-packages/numpy/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/jaxattacks/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/tfattacks/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/examples/cifar_example_with_amp.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/analysis/__init__.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/examples/cifar_example_with_amp.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/examples/cifar_example.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepillusion/__init__.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/setup.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/LICENSE",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/LICENSE.txt",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/setup.cfg",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/examples/cifar10-adversarial-examples.ipynb",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/_fgsm.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/amp/_fgsm.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/amp/__init__.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/__init__.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/analysis/_perturbation_statistics.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/analysis/__init__.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/_version.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/_utils.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/_soft_attacks.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/amp/_soft_attacks.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/amp/_pgd.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/amp/_rfgsm.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/_rfgsm.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/attacks/_pgd.py",
		"/Users/metehan/Google Drive/github-repos/pytorch-adversarial-attacks/deepIllusion/__init__.py",
		"/Users/metehan/miniconda3/pkgs/numpy-1.17.2-py36h6b0580a_0/lib/python3.6/site-packages/numpy/setup.py"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 28.0
	},
	"output.autopep8":
	{
		"height": 103.0
	},
	"output.exec":
	{
		"height": 109.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 180.0
	},
	"output.markdown":
	{
		"height": 103.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 29.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "deep_noise_rejection.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
